pragma language_version >= 0.17.0;

module Utils {
  import CompactStandardLibrary;

  //Address Utils
  export pure circuit isKeyOrAddressZero(keyOrAddress: Either<ZswapCoinPublicKey, ContractAddress>): Boolean {
    return isContractAddress(keyOrAddress)
             ? default<ContractAddress> == keyOrAddress.right
             : default<ZswapCoinPublicKey> == keyOrAddress.left;
  }

  export pure circuit isKeyZero(key: ZswapCoinPublicKey): Boolean {
    const zero = default<ZswapCoinPublicKey>;
    return zero == key;
  }

  export pure circuit isKeyOrAddressEqual(
                        keyOrAddress: Either<ZswapCoinPublicKey, ContractAddress>,
                        other: Either<ZswapCoinPublicKey, ContractAddress>
                        ): Boolean {
    if (keyOrAddress.is_left && other.is_left) {
       return keyOrAddress.left == other.left;
    } else
       if (!keyOrAddress.is_left && !other.is_left) {
          return keyOrAddress.right == other.right;
       } else {
          return false;
       }
  }

  export pure circuit isContractAddress(keyOrAddress: Either<ZswapCoinPublicKey, ContractAddress>): Boolean {
    return !keyOrAddress.is_left;
  }

  export pure circuit emptyString(): Opaque<"string"> {
    return default<Opaque<"string">>;
  }
}
